name: Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-22.04
    env:
      # variables for our front-end tests, see client/src/config.ts
      VITE_API_ORIGIN: http://localhost:3000
      VITE_API_PATH: /api/v1/trpc

      # variables for our back-end tests, see server/src/config.ts
      DATABASE_URL: postgres://postgres:1234@localhost:5432/beauty_salons
      TEST_DATABASE_URL: postgres://postgres:1234@localhost:5432/test_beauty_salons
    services:
      # spin up a database for tests
      postgres:
        image: postgres:16.1-alpine
        env:
          # Postgres will create a database with the following credentials
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create required databases
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE beauty_salons;"
          psql -h localhost -U postgres -c "CREATE DATABASE test_beauty_salons;"
        env:
          PGPASSWORD: 1234

      - name: Type check server
        run: npm run typecheck -w=server

      - name: Type check client
        run: npm run typecheck -w=client

      - name: Lint server
        run: npm run lint -w=server

      - name: Lint client
        run: npm run lint -w=client

      - name: Test client (unit)
        run: npm run test:unit -w=client

      - name: Run server database migrations
        run: npm run migrate:latest -w=server

      - name: Test server
        run: npm run test -w=server

      # Add more browsers here if you want to test on more/different browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Testing the entire application with a running API server.
      # We must start the server first. & at the end of the command
      # makes it b brun in the background. While it is starting up,
      # we will continue with other steps.
      - name: Start server for E2E tests
        run: npm run dev -w=server &

      # Build the front end for E2E tests. We are building it
      # instead of running it in dev mode because there is some
      # differences between dev mode and production mode front
      # end code.
      - name: Build front end for E2E tests
        run: npm run build -w=client

      # Just to make sure that our server is up and running before
      # we start our E2E tests, we will use a health check action
      # which will make a request to the server and wait for it to
      # respond with a non-failing status code.
      # This assumes we have a public /api/health endpoint in our
      # Express server that returns a non-failing status code.
      - name: Wait for server to startup
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: ${{ env.VITE_API_ORIGIN }}/api/health

      - name: Test client E2E
        run: npm run test:e2e -w=client

      # Playwright generates a report of the E2E tests. We will
      # upload that report as an artifact so that we can download
      # it later from the GitHub Actions UI. This will help us
      # debug any issues that occured in E2E tests.
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 7
